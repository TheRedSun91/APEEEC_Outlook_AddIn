using GpgApi;
using System;
using System.Linq;
using Outlook = Microsoft.Office.Interop.Outlook;
using System.IO;
using APEEEC_Outlook_AddIn.src.Forms.Certification;
using NLog;
using APEEEC_Outlook_AddIn.src.WorkflowHandler;
using APEEEC_Outlook_AddIn.src.Forms;

namespace APEEEC_Outlook_AddIn.src.Encryption
{
    class KeyManager
    {
        private GpgListPublicKeys _publicKeys;
        private GpgListSecretKeys _privateKeys;
        public String _directoryPath = Path.GetTempPath();
        const string PR_SMTP_ADDRESS = "http://schemas.microsoft.com/mapi/proptag/0x39FE001E";
        private static Logger logger = LogManager.GetCurrentClassLogger();

        public KeyManager()
        {
            if (Directory.Exists("C:\\Program Files (x86)\\GNU\\GnuPG\\"))
            {
                logger.Info("64-Bit Operating System.");
                GpgInterface.ExePath = "C:\\Program Files (x86)\\GNU\\GnuPG\\gpg2.exe";
            }
            else if(Directory.Exists("C:\\Program Files\\GNU\\GnuPG\\"))
            {
                logger.Info("32-Bit Operating System.");
                GpgInterface.ExePath = "C:\\Program Files\\GNU\\GnuPG\\gpg2.exe";
            }
            else
            {
                logger.Info("GnuPG not installed.");
                GnuPGMissingForm gnuPgMissingForm = new GnuPGMissingForm();
                gnuPgMissingForm.ShowDialog();
                //how to continue??
            }

            ReLoadPublicKeys();
        }

        public Key GetPublicKey (String email)
        {
            foreach (Key key in _publicKeys.Keys)
            {
                //key user info is a list, although contains only 1 item
                KeyUserInfo userInfo = key.UserInfos.First();
                if ((userInfo.Email == email) && (!key.IsDisabled))
                {
                    logger.Info("Public Key for " + email + " found and returned.");
                    return key;
                }
            }
            logger.Warn("No Public Key found.");
            return null;
        }

        //key should be imported from received mail item
        public void ImportKeyFromMessageAttachments(Outlook.Attachments attachments, String emailAddress) 
        {
            String fileName = emailAddress + "_" + "publicKey.asc";
            //check for publicKey in attachment
            foreach (Outlook.Attachment attachment in attachments)
            {
                if (attachment.FileName == fileName)
                {
                    //import the key
                    String savedFile = Path.GetTempFileName();
                    attachment.SaveAsFile(savedFile);
                    GpgImportKey importingKey = new GpgImportKey(savedFile);
                    GpgInterfaceResult result = importingKey.Execute();
                    if (CallbackHandler.Callback(result, logger) == false)
                    {
                        ErrorForm errorForm = new ErrorForm();
                        errorForm.Show();
                    }
                    File.Delete(savedFile);
                }
            }
            ReLoadPublicKeys();
        }

        internal void CreateNewKeyPair(String nameString, Email email)
        {
            String comment = email + "_-_Key-Pair generated by APEEEC";
            KeyAlgorithm algorithm = KeyAlgorithm.RsaRsa;
            uint size = 4096;
            //in the GpgGenerateKey class a method named GpgConvertToDays is being called
            //that method calculates the days from the expirationDate to today
            //the difference in days from today to today is 0 --> gen-key with 0 means no expiration date
            DateTime expirationDate = DateTime.Today;
            Name name = new Name(nameString);
            GpgGenerateKey generateKey = new GpgGenerateKey(name, email, comment, algorithm, size, expirationDate);
            GpgInterfaceResult result = generateKey.Execute();
            CallbackHandler.Callback(result, logger);
            ReLoadPublicKeys();
        }

        public string getEmailOfCurrentUser()
        {
            //check if the current sender has a key stored to send to the recipient
            //the currentItem.Address only holds Exchange Address Values
            //which need to be mapped to proper email addresses
            Outlook.PropertyAccessor propAccessorForSender = Globals.ThisAddIn.Application.ActiveExplorer().Session.CurrentUser.PropertyAccessor;
            return propAccessorForSender.GetProperty(PR_SMTP_ADDRESS).ToString();
        }

        internal string getEmailFromPropertyAccessor(Outlook.PropertyAccessor propAccessorForRecipient)
        {
            return propAccessorForRecipient.GetProperty(PR_SMTP_ADDRESS).ToString();
        }

        internal void StartKeyExchange(Outlook.MailItem newMail, String senderEmail, Outlook.Recipient recipient)
        {

            //add subject to mail (clear for everybody what it means)
            newMail.Subject = "APEEEC - Encrypted Communication Request";

            //get the key from email
            Key publicKey = GetPublicKey(senderEmail);

            //export key
            String keyPath = ExportPublicKeyToFile(publicKey, senderEmail);

            //retrieve the key from the saved location and add it to the mail as an attachment
            if (keyPath.Length > 0)
            {
                //0 as parameter will make the attachment hidden
                //set 1 if it is preferred not to be hidden
                newMail.Attachments.Add(
                    keyPath,
                    Outlook.OlAttachmentType.olByValue,
                    0,
                    keyPath);
                //add recipient
                newMail.Recipients.Add(recipient.Name);
                //add the body
                newMail.Body += "This message was generated by the APEEEC-Protocol and is used only to establish secure encrypted communication.";
                newMail.Body += "The sender " + senderEmail + " asks you for an encrypted e-mail communication. To answer the request please ensure that you installed the APEEEC-Add-In. Then switch to the APEEEC-Ribbon and choose \"Import Certificate\".";
                newMail.Body += "There you can choose to accept or decline the encrypted e-mail communication request.";
                //send the mail
                ((Outlook._MailItem)newMail).Send();
                logger.Info("Key-Exchange request sent.");
            }
            File.Delete(keyPath);
        }

        internal void StartCertification()
        {
            CertificationStartForm certificationStartForm = new CertificationStartForm();
            certificationStartForm.Show();
        }

        internal KeyId GetSignKeyIDForEmail(String email)
        {
            _privateKeys = new GpgListSecretKeys();
            GpgInterfaceResult result = _privateKeys.Execute();
            CallbackHandler.Callback(result, logger);

            foreach (Key key in _privateKeys.Keys)
            {
                KeyUserInfo userInfo = key.UserInfos.First();
                if ((userInfo.Email == email) && (!key.IsDisabled))
                {
                    return key.Id;
                }
            }
            logger.Warn("Error-Handling required");
            return null;
        }


        private String ExportPublicKeyToFile (Key publicKey, String senderEmail)
        {
            GpgExportKey gpgExportKey = new GpgExportKey(publicKey.Id, false);
            GpgInterfaceResult result = gpgExportKey.Execute();
            CallbackHandler.Callback(result, logger);

            String keyAsString = gpgExportKey.ExportedKey;

            String filePath = senderEmail + "_" + "publicKey.asc";
            String keyFilePath = _directoryPath + filePath;
            File.WriteAllText(keyFilePath, keyAsString);
            logger.Warn("Error-Handling required");
            return keyFilePath;
        }

        internal void SendNegativeKeyExchangeResponse(Outlook.MailItem newMail, Outlook.AddressEntry recipient, string sender)
        {
            //sender and recipient change in the process of the invocation of the method (they enter as sender / recipient in the parameters)
            logger.Info("Recipient: " + recipient.Address + "; Sender: " + sender);
            //add subject to mail (clear for everybody what it means)
            newMail.Subject = "APEEEC - Negative Encrypted Communication Response";

            //add recipient
            newMail.Recipients.Add(recipient.Address);
            
            //add the body
            newMail.Body += "This message was generated by the APEEEC-Protocol and is used only to establish secure encrypted communication.";
            newMail.Body += "The sender " + sender + " denies your request for encrypted e-mail communication. If you wish to continue communicating with the sender please be aware that the connection will not be encrypted!";
            //send the mail
            newMail.Send();
            logger.Warn("Error-Handling required");
        }

        internal void SendPositiveKeyExchangeResponse(Outlook.MailItem newMail, Outlook.AddressEntry recipient, String sender)
        {
            //sender and recipient change in the process of the invocation of the method (they enter as sender / recipient in the parameters

            //add subject to mail (clear for everybody what it means)
            newMail.Subject = "APEEEC - Positive Encrypted Communication Response";

            //get the key from email
            Key publicKey = GetPublicKey(sender);

            //export key
            String keyPath = ExportPublicKeyToFile(publicKey, sender);

            //retrieve the key from the saved location and add it to the mail as an attachment
            if (keyPath.Length > 0)
            {
                newMail.Attachments.Add(
                    keyPath,
                    Outlook.OlAttachmentType.olByValue,
                    0,
                    keyPath);
                //add recipient
                newMail.Recipients.Add(recipient.Address);
                //add the body
                newMail.Body += "This message was generated by the APEEEC-Protocol and is used only to establish secure encrypted communication.";
                newMail.Body += "The sender " + sender + " accepts your request for encrypted e-mail communication. Please switch to the APEEEC-Ribbon and choose \"Import Certificate\". to finalize the process.";
                //send the mail
                ((Outlook._MailItem)newMail).Send();
                logger.Warn("Error-Handling required");
            }
            File.Delete(keyPath);
        }

        internal void ReLoadPublicKeys()
        {
            _publicKeys = new GpgListPublicKeys();
            GpgInterfaceResult result = _publicKeys.Execute();
            CallbackHandler.Callback(result, logger);
            logger.Info("Public keys list reloaded.");
        }
    }
}